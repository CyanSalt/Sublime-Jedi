%YAML 1.2
---
name: Jedi
file_extensions:
  - jedi
scope: source.jedi
variables:
  identifier: '[_$[:alpha:]][_$[:alnum:]]*'
  tag_name: '\b(?:mip-)?[[:alpha:]]+[1-6]?\b'
  end_indentation: ^(?!(\1\s)|\s*$) # cannot use directly

contexts:
  main:
    - include: comments-top-level
    - include: keyword-top-level
    - include: layout-top-level

  comments-top-level:
    - include: comments-unbuffered
    - include: comments-buffered

  keyword-top-level:
    - include: inline-keyword-statement
    - include: block-keyword-statement
    - include: block-expression
    - include: macro
    - include: php-embedded

  inline-keyword-statement:
    - include: external-statement
    - include: import-statement
    - include: namespace-statement
    - include: unsafe-statement
    - include: debug-statement

  block-keyword-statement:
    - include: if-statement
    - include: else-statement
    - include: let-statement
    - include: for-statement

  layout-top-level:
    - include: block-extended
    - include: html-tag

  html-tag:
    - include: script-tag
    - include: style-tag
    - include: common-tag
    - include: text-node

  html-tag-info:
    - include: inline-statement
    - include: tag-selector
    - include: tag-attributes
    - include: tag-hierarchy
    - include: inline-expression
    - include: macro-invoking

  expression:
    - include: literal
    - include: array
    - include: macro-data
    - include: property-expression
    - include: function-call
    - include: arithmetic-expression
    - include: logic-expression
    - include: ternary-expression
    - include: base-variable

  #### comments start ####

  comments-unbuffered:
    - match: ^(\s*)--
      scope: punctuation.definition.comment.jedi
      push: 
        - meta_scope: comment.block.unbuffered.jedi
        - match: ^(?!(\1\s)|\s*$)
          pop: true
    - match: //
      scope: punctuation.definition.comment.jedi
      push:
        - meta_scope: comment.line.unbuffered.jedi
        - match: \n
          pop: true

  comments-buffered:
    - match: ^(\s*)!
      scope: punctuation.definition.comment.jedi
      push:
        - meta_scope: string.comment.block.buffered.jedi
        - match: ^(?!(\1\s)|\s*$)
          pop: true
    - match: ^\s*!
      scope: punctuation.definition.comment.jedi
      push:
        - meta_scope: string.comment.line.buffered.jedi
        - match: \n
          pop: true

  #### comment end ####
  #### HTML tags start ####

  script-tag:
    - match: ^(\s*)(script)
      captures:
        2: entity.name.tag.script.jedi
      push:
        - meta_content_scope: source.js.embedded.jedi
        - match: ^(?!(\1\s)|\s*$)
          pop: true
        - match: ^(\s*)!
          scope: punctuation.definition.comment.jedi
          push:
            - meta_scope: meta.embedded.block.js
            - meta_content_scope: source.js
            - match: ^(?!(\1\s)|\s*$)
              pop: true
            - include: 'scope:source.js'
        - include: html-tag-info

  style-tag:
    - match: ^(\s*)(style)
      captures:
        2: entity.name.tag.style.jedi
      push:
        - meta_content_scope: source.css.embedded.jedi
        - match: ^(?!(\1\s)|\s*$)
          pop: true
        - match: ^(\s*)!
          scope: punctuation.definition.comment.jedi
          push:
            - meta_scope: meta.embedded.block.css
            - meta_content_scope: source.css
            - match: ^(?!(\1\s)|\s*$)
              pop: true
            - include: 'scope:source.css'
        - include: html-tag-info

  common-tag:
    - match: ^(\s*)({{tag_name}})
      captures:
        2: entity.name.tag.jedi
      push:
        - match: ^(?!(\1\s)|\s*$)
          pop: true
        - include: html-tag-info
        - include: main

  text-node:
    - match: \s*('|")
      scope: punctuation.definition.text.begin.jedi
      push:
        # - meta_scope: string.quoted.content.jedi
        - meta_scope: text.content.jedi
        - match: \1|\n
          scope: punctuation.definition.text.end.jedi
          pop: true
        - include: template-expression

  #### HTML tags end ####
  #### HTML tag info start ####

  tag-selector:
    - match: \b((?:\.[\w\-_]+\b)*)(#[\w\-_]+\b)?
      captures:
        1: constant.language.class.jedi
        2: constant.language.id.jedi
      push:
        - match: \s
          pop: true

  tag-hierarchy:
    - match: (>)\s*({{tag_name}})
      captures:
        1: punctuation.separator.combinator.jedi
        2: entity.name.tag.jedi

  tag-attributes:
    - match: \@{2}
      scope: entity.other.attribute-name.start.jedi
      push:
        - match: (?=\n|@)
          pop: true
        - include: tag-attribute-multi-kv
    - match: \@\b
      scope: entity.other.attribute-name.start.jedi
      push:
        - match: (?=\n|@)
          pop: true
        - include: tag-attribute-kv

  tag-attribute-kv:
    - match: ([\w\-_]+)\b
      scope: entity.other.attribute-name.jedi
      push:
        - match: \=
          scope: punctuation.separator.key-value.jedi
          push:
            - include: tag-attribute-value
            - match: (?=\n)
              pop: true
        - match: (?=\n|@)
          pop: true

  tag-attribute-multi-kv:
    - match: ([\w\-_]+)\b
      scope: entity.other.attribute-name.jedi
      push:
        - match: \=
          scope: punctuation.separator.key-value.jedi
          push:
            - include: tag-attribute-value
        - match: (?=\n)|\s
          pop: true

  tag-attribute-value:
    - match: ('|")
      scope: punctuation.definition.string.begin.jedi
      set:
        - meta_scope: string.quoted.attribute.jedi
        - match: \1
          scope: punctuation.definition.string.end.html
          pop: true
        - include: template-expression
    ## include `template-expression` directly is useless, why??
    - match: \{
      scope: punctuation.definition.expression.begin.jedi
      set:
        - match: \}
          scope: punctuation.definition.expression.end.html
          pop: true
        - include: expression
    - include: function-call
    - include: base-variable

  #### HTML tag info end ####
  #### language feature start ####

  block-extended:
    - match: ^(\s*)(#[\w\-_]+)(::(before|after))?
      captures:
        2: entity.name.tag.jedi
        3: support.class.pseudo.jedi
      push:
        - match: ^(?!(\1\s)|\s*$)
          pop: true
        - include: main

  macro:
    - match: ^(\s*)::({{tag_name}}((?:\.[\w\-_]+\b)*))
      captures:
        2: entity.name.function.macro.jedi
        3: constant.language.class.macro.jedi
      push:
        - match: ^(?!(\1\s)|\s*$)
          pop: true
        - match: \(
          scope: punctuation.section.group.start.jedi
          push:
            - match: \)
              scope: punctuation.section.group.end.jedi
              pop: true
            - match: \,
              scope: punctuation.separator.comma.jedi
            - match: ({{identifier}})
              scope: variable.parameter.macro.jedi
        - include: tag-attributes
        ## actually not `tag-selector`, and also support Goto Symbol showing fullname
        # - include: tag-selector
        - include: main

  template-expression:
    - match: \{
      scope: punctuation.definition.expression.begin.jedi
      push:
        # - meta_scope: string.template.expression.jedi
        - match: \}
          scope: punctuation.definition.expression.end.jedi
          pop: true
        - include: expression

  assignment:
    - match: \s*([\w_]+)\s*(=)\s*
      captures:
        1: variable.other.readwrite.jedi
        2: keyword.operator.value.jedi
      push:
        - match: (?=\n|,)
          pop: true
        - include: expression

  block-expression:
    - match: ^\s*\=
      scope: keyword.operator.value.jedi
      push:
        - match: \n
          pop: true
        - include: expression

  inline-expression:
    - match: \=\s*\b
      scope: keyword.operator.value.jedi
      push:
        - meta_scope: variable.other.readwrite.jedi
        - match: \n|,
          pop: true
        - include: expression

  macro-invoking:
    - match: (\=)\s*(\[)
      captures:
        1: keyword.operator.value.jedi
        2: punctuation.definition.brackets.jedi
      push:
        - match: \]
          scope: punctuation.definition.brackets.jedi
          pop: true
        - match: \,
          scope: punctuation.separator.comma.jedi
        - include: expression

  namespace-using:
    - match: \\?\b(?:([\w_]+)(\\|/))*([\w_]+\b)
      captures:
        1: entity.name.namespace.jedi
        2: punctuation.separator.namespace.jedi
        3: entity.name.type.class.jedi
      push:
        - match: (?=\n|,)
          pop: true

  #### language feature end ####
  #### expression start ####

  literal:
    - match: \d+\.{2}(?:\.|<)\d+
      scope: constant.language.range.jedi
    - match: \d+(\.\d+)?
      scope: constant.numeric.jedi
    - match: \b(true|false)\b
      scope: constant.language.boolean.jedi
    - match: \bnull\b
      scope: constant.language.null.jedi
    - match: ('|")
      scope: punctuation.definition.text.begin.jedi
      push:
        - meta_scope: string.quoted.literal.jedi
        - match: \1
          pop: true

  array:
    - match: \[
      scope: punctuation.definition.brackets.jedi
      push:
        - match: \]
          scope: punctuation.definition.brackets.jedi
          pop: true
        - match: \,
          scope: punctuation.separator.comma.jedi
        - include: expression

  macro-data:
    - match: (\*)\[
      captures:
        1: variable.language.macro.jedi
      push:
        - match: \]
          pop: true
        - include: literal
    - match: (\*)(\.)
      captures:
        1: variable.language.macro.jedi
        2: keyword.operator.property.jedi
      push:
        - match: \b
          pop: true
        - include: expression

  property-expression:
    - match: '(?:([A-Z]{{identifier}})|({{identifier}}))(\.)\b'
      captures:
        1: support.class.jedi
        2: variable.other.readwrite.jedi
        3: keyword.operator.property.jedi
      push:
        - match: \b
          pop: true
        - include: expression

  function-call:
    - match: '({{identifier}})(\()'
      captures:
        1: support.function.call.jedi
        2: punctuation.section.group.start.jedi
      push:
        - match: \)
          scope: punctuation.section.group.end.jedi
          pop: true
        - match: \,
          scope: punctuation.separator.comma.jedi
        - include: expression

  arithmetic-expression:
    - match: (\+|\-|×|÷|<{2,3}|>{2,3}|mul\b|div\b|mod\b)
      scope: keyword.operator.arithmetic.jedi
      # push:
      #   - include: expression

  logic-expression:
    - include: equation-expression
    - match: ((?:\|\|)|&&)
      scope: keyword.operator.logic.jedi
      # push:
      #   - match: (?=\n|,)
      #     pop: true
      #   - match: (?=then|else\b)
      #     pop: true
      #   - include: expression
    - match: \bnot\b|!
      scope: keyword.operator.logic.jedi
      push:
        - match: \b
          pop: true
        - include: expression

  equation-expression:
    - match: (\!\={1,2}|\={2,3}|>\=?|<\=?|<\=>)
      scope: keyword.operator.logic.jedi
      # push:
      #   - match: (?=\n|,)
      #     pop: true
      #   - match: (?=then|else\b)
      #     pop: true
      #   - include: expression

  ternary-expression:
    - match: \s*if\b
      scope: keyword.control.conditional.jedi
      push:
        - match: (?=\n|,|\})
          pop: true
        - match: \s*then\b
          scope: keyword.control.conditional.jedi
          push:
            - match: (?=\n|,|\})
              pop: true
            - match: \s*else\b
              scope: keyword.control.conditional.jedi
              push:
                - match: (?=\n|,|\})
                  pop: true
                - include: expression
            - include: expression
        - include: expression

  base-variable:
    - match: '{{identifier}}'
      scope: variable.other.readwrite.jedi

  #### expression end ####
  #### keyword statement start ####

  external-statement:
    - match: ^(?:\s*):\s*(external)\b
      captures:
        1: keyword.control.external.jedi
        # 2: entity.name.external.jedi
      push:
        - match: \n
          pop: true
        - match: \b[a-z]([\w_]+)\b
          scope: support.function.php
          push:
            - match: (?=\n|,)
              pop: true
        - match: \b[A-Z]([\w_]+)\b
          scope: support.class.php
          push:
            - match: (?=\n|,)
              pop: true
        - match: \,
          scope: punctuation.separator.comma.jedi

  import-statement:
    - match: ^(\s*):\s*(import)\s*([\w_\-/\.]+)?\b
      captures:
        2: keyword.control.import.jedi
        3: variable.parameter.import.jedi
      push:
        - match: ^(?!(\1\s)|\s*$)
          pop: true
        - include: main

  namespace-statement:
    - match: ^(?:\s*):\s*(use)\b
      captures:
        1: keyword.control.namespace.jedi
        # 2: variable.parameter.namespace.jedi
      push:
        - match: \n
          pop: true
        - match: \,
          scope: punctuation.separator.comma.jedi
        - include: namespace-using

  unsafe-statement:
    - match: ^(?:\s*):\s*(unsafe)\b
      captures:
        1: keyword.control.unsafe.jedi
      push:
        - match: \n
          pop: true
        - include: expression

  debug-statement:
    - match: ^(?:\s*):\s*(d)\b
      captures:
        1: keyword.control.debug.jedi
      push:
        - match: \n
          pop: true
        - include: expression

  inline-statement:
    - match: \bif|else\b
      scope: keyword.control.conditional.jedi
      push:
        - match: \n
          pop: true
        - include: expression
    - match: \bfor\b
      scope: keyword.control.loop.jedi
      push:
        - match: \n
          pop: true
        - include: iterator-statement

  if-statement:
    - match: ^(\s*):\s*((?:else )?if)\b
      captures:
        2: keyword.control.conditional.jedi
      push:
        - match: ^(?!(\1\s)|\s*$)
          pop: true
        - include: expression
        - include: main

  else-statement:
    - match: ^(\s*):\s*(else)\b
      captures:
        2: keyword.control.conditional.jedi
      push:
        - match: ^(?!(\1\s)|\s*$)
          pop: true
        - include: main

  let-statement:
    - match: ^(\s*):\s*(let)\b
      captures:
        2: storage.type.jedi
      push:
        - match: ^(?!(\1\s)|\s*$)
          pop: true
        - match: \n
          set: main
        - include: assignment
        - match: \,
          scope: punctuation.separator.comma.jedi

  for-statement:
    - match: ^(\s*):\s*(for)\b
      captures:
        2: keyword.control.loop.jedi
      push:
        - match: ^(?!(\1\s)|\s*$)
          pop: true
        - match: \n
          set: main
        - include: iterator-statement

  iterator-statement:
    - match: \(?([\s\w_]+(?:,[\s\w_]+){0,3})\)?\s*(in)\b
      captures:
        1: variable.parameter.loop.jedi
        2: keyword.operator.in-loop.jedi
        3: variable.other.readwrite.jedi
      push:
        - match: (?=\n|,)
          pop: true
        - include: expression

  php-embedded:
    - match: ^\s*-\s*
      # scope: punctuation.section.embedded.begin.php
      push:
        - meta_scope: meta.embedded.line.php
        - meta_content_scope: source.php
        - match: \n
          pop: true
        - include: 'scope:source.php'

  #### keyword statement end ####
